/**
 * @fileoverview Firestore Security Rules for Familienplaner.
 *
 * Core Philosophy:
 * This ruleset enforces a family-centric security model where users can only access data
 * related to their family.  User profiles are private and only accessible to the user themselves.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user.
 * - /families/{familyName}/events/{eventId}: Stores calendar events for a given family.  All family members have access.
 * - /families/{familyName}/tasks/{taskId}: Stores tasks for a given family. All family members have access.
 * - /families/{familyName}/shoppingListItems/{shoppingListItemId}: Stores shopping list items for a given family.  All family members have access.
 * - /families/{familyName}/dogPlan/{dogPlanItemId}: Stores dog plan items for a given family. All family members have access.
 * - /families/{familyName}/locations/{locationId}: Stores reusable locations for a family. All family members have access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Listing of users is disallowed.
 * - All data within a family (events, tasks, shopping list items, dog plan, locations) is accessible to all authenticated users who are members of that family.
 * - Schema validation is relaxed in this prototyping phase to allow for rapid iteration.  Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * The 'familyName' field is denormalized onto the User document. This allows rules to quickly verify family membership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a member of the family.
     * @param {string} familyName - The family name to compare against.
     */
    function isFamilyMember(familyName) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == familyName;
    }

    /**
     * @description Stores user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *    request.auth.uid == 'user123'
     *    request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their profile.
     *    request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched ID.
     *    request.auth.uid == 'user456'
     *    request.resource.data.id == 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores calendar events for each family.
     * @path /families/{familyName}/events/{eventId}
     * @allow (create) User belonging to 'Familie-Butz-Braun' can create an event.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @allow (get, list, update, delete) User belonging to 'Familie-Butz-Braun' can read/modify events.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @deny (create, get, list, update, delete) User belonging to 'Familie-Müller' cannot access 'Familie-Butz-Braun' events.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Müller'
     * @principle Family members can manage calendar events.
     */
    match /families/{familyName}/events/{eventId} {
      allow get: if isFamilyMember(familyName);
      allow list: if isFamilyMember(familyName);
      allow create: if isFamilyMember(familyName);
      allow update: if isFamilyMember(familyName) && resource != null;
      allow delete: if isFamilyMember(familyName) && resource != null;
    }

    /**
     * @description Stores tasks for each family.
     * @path /families/{familyName}/tasks/{taskId}
     * @allow (create) User belonging to 'Familie-Butz-Braun' can create a task.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @allow (get, list, update, delete) User belonging to 'Familie-Butz-Braun' can read/modify tasks.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @deny (create, get, list, update, delete) User belonging to 'Familie-Müller' cannot access 'Familie-Butz-Braun' tasks.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Müller'
     * @principle Family members can manage tasks.
     */
    match /families/{familyName}/tasks/{taskId} {
      allow get: if isFamilyMember(familyName);
      allow list: if isFamilyMember(familyName);
      allow create: if isFamilyMember(familyName);
      allow update: if isFamilyMember(familyName) && resource != null;
      allow delete: if isFamilyMember(familyName) && resource != null;
    }

    /**
     * @description Stores shopping list items for each family.
     * @path /families/{familyName}/shoppingListItems/{shoppingListItemId}
     * @allow (create) User belonging to 'Familie-Butz-Braun' can create a shopping list item.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @allow (get, list, update, delete) User belonging to 'Familie-Butz-Braun' can read/modify shopping list items.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @deny (create, get, list, update, delete) User belonging to 'Familie-Müller' cannot access 'Familie-Butz-Braun' shopping list items.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Müller'
     * @principle Family members can manage shopping list items.
     */
    match /families/{familyName}/shoppingListItems/{shoppingListItemId} {
      allow get: if isFamilyMember(familyName);
      allow list: if isFamilyMember(familyName);
      allow create: if isFamilyMember(familyName);
      allow update: if isFamilyMember(familyName) && resource != null;
      allow delete: if isFamilyMember(familyName) && resource != null;
    }

    /**
     * @description Stores dog plan items for each family.
     * @path /families/{familyName}/dogPlan/{dogPlanItemId}
     * @allow (create) User belonging to 'Familie-Butz-Braun' can create a dog plan item.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @allow (get, list, update, delete) User belonging to 'Familie-Butz-Braun' can read/modify dog plan items.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @deny (create, get, list, update, delete) User belonging to 'Familie-Müller' cannot access 'Familie-Butz-Braun' dog plan items.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Müller'
     */
    match /families/{familyName}/dogPlan/{dogPlanItemId} {
      allow get: if isFamilyMember(familyName);
      allow list: if isFamilyMember(familyName);
      allow create: if isFamilyMember(familyName);
      allow update: if isFamilyMember(familyName) && resource != null;
      allow delete: if isFamilyMember(familyName) && resource != null;
    }

        /**
     * @description Stores reusable locations for a family.
     * @path /families/{familyName}/locations/{locationId}
     * @allow (create) User belonging to 'Familie-Butz-Braun' can create a location.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @allow (get, list, update, delete) User belonging to 'Familie-Butz-Braun' can read/modify locations.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Butz-Braun'
     * @deny (create, get, list, update, delete) User belonging to 'Familie-Müller' cannot access 'Familie-Butz-Braun' locations.
     *    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == 'Familie-Müller'
     */
    match /families/{familyName}/locations/{locationId} {
      allow get: if isFamilyMember(familyName);
      allow list: if isFamilyMember(familyName);
      allow create: if isFamilyMember(familyName);
      allow update: if isFamilyMember(familyName) && resource != null;
      allow delete: if isFamilyMember(familyName) && resource != null;
    }
  }
}