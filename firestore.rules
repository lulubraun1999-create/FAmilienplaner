/**
 * @fileoverview Firestore Security Rules for the Familienplaner application.
 *
 * Core Philosophy:
 * This ruleset enforces a family-centric access control model. Users can only
 * access data that belongs to their family. User profiles are private and
 * only accessible to the user themselves.
 *
 * Data Structure:
 * - /families/{familyName}/...: All family-related data (events, tasks, shopping lists, dog plans, locations)
 * - /users/{userId}: User profile data
 *
 * Key Security Decisions:
 * - Users can only list documents within their family context.
 * - User profiles are strictly private and only accessible to the owning user.
 * - The rules do not enforce strict schema validation, allowing for flexible
 *   data shapes during prototyping. However, relational integrity is maintained
 *   by validating key fields like IDs and ownership on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the document ID.
     * @allow (get, list, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user's ID does not match the document ID.
     * @deny (get, list, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to calendar events for a family.
     * @path /families/{familyName}/events/{eventId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create) - If the user is authenticated.
     * @allow (update, delete) - If the user is authenticated and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not authenticated or the document does not exist.
     * @principle Enforces family-based access control for calendar events.
     */
    match /families/{familyName}/events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to tasks for a family.
     * @path /families/{familyName}/tasks/{taskId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create) - If the user is authenticated.
     * @allow (update, delete) - If the user is authenticated and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not authenticated or the document does not exist.
     * @principle Enforces family-based access control for tasks.
     */
    match /families/{familyName}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to shopping list items for a family.
     * @path /families/{familyName}/shoppingListItems/{shoppingListItemId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create) - If the user is authenticated.
     * @allow (update, delete) - If the user is authenticated and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not authenticated or the document does not exist.
     * @principle Enforces family-based access control for shopping list items.
     */
    match /families/{familyName}/shoppingListItems/{shoppingListItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to dog plan items for a family.
     * @path /families/{familyName}/dogPlan/{dogPlanItemId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create) - If the user is authenticated.
     * @allow (update, delete) - If the user is authenticated and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not authenticated or the document does not exist.
     * @principle Enforces family-based access control for dog plan items.
     */
    match /families/{familyName}/dogPlan/{dogPlanItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to locations for a family.
     * @path /families/{familyName}/locations/{locationId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create) - If the user is authenticated.
     * @allow (update, delete) - If the user is authenticated and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not authenticated or the document does not exist.
     * @principle Enforces family-based access control for locations.
     */
    match /families/{familyName}/locations/{locationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}