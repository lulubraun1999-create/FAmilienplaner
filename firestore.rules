/**
 * @fileoverview Firestore Security Rules for Familienplaner.
 *
 * Core Philosophy:
 * This ruleset enforces a family-centric security model.  Users can only
 * access data related to their family. Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. User documents are self-owned.
 * - /families/{familyName}/...: Stores family-specific data.
 *   - /families/{familyName}/events/{eventId}: Calendar events for the family.
 *   - /families/{familyName}/tasks/{taskId}: Tasks for the family.
 *   - /families/{familyName}/shoppingListItems/{shoppingListItemId}: Shopping list items.
 *   - /families/{familyName}/dogPlan/{dogPlanItemId}: Dog plan items.
 *   - /families/{familyName}/locations/{locationId}: Reusable locations.
 *
 * Key Security Decisions:
 * - Users can only list documents within their own family.
 * - Data validation is minimal to enable rapid iteration.  Only relational
 *   integrity (e.g., creatorId) is strictly enforced.
 *
 * Denormalization for Authorization:
 *  - The familyName is included in the user document.  This allows rules to
 *    easily check family membership without additional reads.
 *
 * Structural Segregation:
 *  - There is no private vs. public segregation. All family data is treated as private
 *    and accessible only to members of that family.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is a member of the specified family.
     * @details This function relies on the `familyName` field being present in the user document.
     */
    function isFamilyMember(familyName) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyName == familyName;
    }

    /**
     * @description Checks if the document exists and the authenticated user is a member of the specified family.
     */
    function isExistingFamilyMember(familyName) {
      return resource != null && isFamilyMember(familyName);
    }
    
    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a document at /users/user123.
     * @allow (get) - User with UID 'user123' can read the document at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the document at /users/user123.
     * @allow (update) - User with UID 'user123' can update the document at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the document at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete the document at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the document at /users/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for calendar events within a family.
     * @path /families/{familyName}/events/{eventId}
     * @allow (create) - User belonging to 'Familie-Butz-Braun' can create an event.
     * @deny (create) - User not belonging to 'Familie-Butz-Braun' cannot create an event.
     * @allow (get) - User belonging to 'Familie-Butz-Braun' can read an event.
     * @deny (get) - User not belonging to 'Familie-Butz-Braun' cannot read an event.
     * @allow (list) - User belonging to 'Familie-Butz-Braun' can list events.
     * @deny (list) - User not belonging to 'Familie-Butz-Braun' cannot list events.
     * @allow (update) - User belonging to 'Familie-Butz-Braun' can update an event.
     * @deny (update) - User not belonging to 'Familie-Butz-Braun' cannot update an event.
     * @allow (delete) - User belonging to 'Familie-Butz-Braun' can delete an event.
     * @deny (delete) - User not belonging to 'Familie-Butz-Braun' cannot delete an event.
     * @principle Enforces family-based access control.
     */
    match /families/{familyName}/events/{eventId} {
      allow create: if isSignedIn() && isFamilyMember(familyName);
      allow get: if isSignedIn() && isFamilyMember(familyName);
      allow list: if isSignedIn() && isFamilyMember(familyName);
      allow update: if isSignedIn() && isExistingFamilyMember(familyName);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyName);
    }

    /**
     * @description Rule for tasks within a family.
     * @path /families/{familyName}/tasks/{taskId}
     * @allow (create) - User belonging to 'Familie-Butz-Braun' can create a task.
     * @deny (create) - User not belonging to 'Familie-Butz-Braun' cannot create a task.
     * @allow (get) - User belonging to 'Familie-Butz-Braun' can read a task.
     * @deny (get) - User not belonging to 'Familie-Butz-Braun' cannot read a task.
     * @allow (list) - User belonging to 'Familie-Butz-Braun' can list tasks.
     * @deny (list) - User not belonging to 'Familie-Butz-Braun' cannot list tasks.
     * @allow (update) - User belonging to 'Familie-Butz-Braun' can update a task.
     * @deny (update) - User not belonging to 'Familie-Butz-Braun' cannot update a task.
     * @allow (delete) - User belonging to 'Familie-Butz-Braun' can delete a task.
     * @deny (delete) - User not belonging to 'Familie-Butz-Braun' cannot delete a task.
     * @principle Enforces family-based access control.
     */
    match /families/{familyName}/tasks/{taskId} {
      allow create: if isSignedIn() && isFamilyMember(familyName);
      allow get: if isSignedIn() && isFamilyMember(familyName);
      allow list: if isSignedIn() && isFamilyMember(familyName);
      allow update: if isSignedIn() && isExistingFamilyMember(familyName);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyName);
    }

    /**
     * @description Rule for shopping list items within a family.
     * @path /families/{familyName}/shoppingListItems/{shoppingListItemId}
     * @allow (create) - User belonging to 'Familie-Butz-Braun' can create a shopping list item.
     * @deny (create) - User not belonging to 'Familie-Butz-Braun' cannot create a shopping list item.
     * @allow (get) - User belonging to 'Familie-Butz-Braun' can read a shopping list item.
     * @deny (get) - User not belonging to 'Familie-Butz-Braun' cannot read a shopping list item.
     * @allow (list) - User belonging to 'Familie-Butz-Braun' can list shopping list items.
     * @deny (list) - User not belonging to 'Familie-Butz-Braun' cannot list shopping list items.
     * @allow (update) - User belonging to 'Familie-Butz-Braun' can update a shopping list item.
     * @deny (update) - User not belonging to 'Familie-Butz-Braun' cannot update a shopping list item.
     * @allow (delete) - User belonging to 'Familie-Butz-Braun' can delete a shopping list item.
     * @deny (delete) - User not belonging to 'Familie-Butz-Braun' cannot delete a shopping list item.
     * @principle Enforces family-based access control.
     */
    match /families/{familyName}/shoppingListItems/{shoppingListItemId} {
      allow create: if isSignedIn() && isFamilyMember(familyName);
      allow get: if isSignedIn() && isFamilyMember(familyName);
      allow list: if isSignedIn() && isFamilyMember(familyName);
      allow update: if isSignedIn() && isExistingFamilyMember(familyName);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyName);
    }

    /**
     * @description Rule for dog plan items within a family.
     * @path /families/{familyName}/dogPlan/{dogPlanItemId}
     * @allow (create) - User belonging to 'Familie-Butz-Braun' can create a dog plan item.
     * @deny (create) - User not belonging to 'Familie-Butz-Braun' cannot create a dog plan item.
     * @allow (get) - User belonging to 'Familie-Butz-Braun' can read a dog plan item.
     * @deny (get) - User not belonging to 'Familie-Butz-Braun' cannot read a dog plan item.
     * @allow (list) - User belonging to 'Familie-Butz-Braun' can list dog plan items.
     * @deny (list) - User not belonging to 'Familie-Butz-Braun' cannot list dog plan items.
     * @allow (update) - User belonging to 'Familie-Butz-Braun' can update a dog plan item.
     * @deny (update) - User not belonging to 'Familie-Butz-Braun' cannot update a dog plan item.
     * @allow (delete) - User belonging to 'Familie-Butz-Braun' can delete a dog plan item.
     * @deny (delete) - User not belonging to 'Familie-Butz-Braun' cannot delete a dog plan item.
     * @principle Enforces family-based access control.
     */
    match /families/{familyName}/dogPlan/{dogPlanItemId} {
      allow create: if isSignedIn() && isFamilyMember(familyName);
      allow get: if isSignedIn() && isFamilyMember(familyName);
      allow list: if isSignedIn() && isFamilyMember(familyName);
      allow update: if isSignedIn() && isExistingFamilyMember(familyName);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyName);
    }
    
    /**
     * @description Rule for reusable locations within a family.
     * @path /families/{familyName}/locations/{locationId}
     * @allow (create) - User belonging to 'Familie-Butz-Braun' can create a location.
     * @deny (create) - User not belonging to 'Familie-Butz-Braun' cannot create a location.
     * @allow (get) - User belonging to 'Familie-Butz-Braun' can read a location.
     * @deny (get) - User not belonging to 'Familie-Butz-Braun' cannot read a location.
     * @allow (list) - User belonging to 'Familie-Butz-Braun' can list locations.
     * @deny (list) - User not belonging to 'Familie-Butz-Braun' cannot list locations.
     * @allow (update) - User belonging to 'Familie-Butz-Braun' can update a location.
     * @deny (update) - User not belonging to 'Familie-Butz-Braun' cannot update a location.
     * @allow (delete) - User belonging to 'Familie-Butz-Braun' can delete a location.
     * @deny (delete) - User not belonging to 'Familie-Butz-Braun' cannot delete a location.
     * @principle Enforces family-based access control.
     */
    match /families/{familyName}/locations/{locationId} {
      allow create: if isSignedIn() && isFamilyMember(familyName);
      allow get: if isSignedIn() && isFamilyMember(familyName);
      allow list: if isSignedIn() && isFamilyMember(familyName);
      allow update: if isSignedIn() && isExistingFamilyMember(familyName);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyName);
    }
  }
}