{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Familienplaner application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "familyName": {
          "type": "string",
          "description": "The name of the family this user belongs to."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "familyName"
      ]
    },
    "CalendarEvent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalendarEvent",
      "type": "object",
      "description": "Represents an event in the calendar.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the CalendarEvent entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "A description of the event."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the event.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the event.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The location of the event."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N CalendarEvent).  The user who created the event."
        },
        "attendeeIds": {
          "type": "array",
          "description": "References to Users. (Relationship: User N:N CalendarEvent).  The users who are attending the event.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "startTime",
        "endTime",
        "creatorId"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task assigned to a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Task entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the task."
        },
        "description": {
          "type": "string",
          "description": "A description of the task."
        },
        "dueDate": {
          "type": "string",
          "description": "The due date of the task.",
          "format": "date-time"
        },
        "priority": {
          "type": "string",
          "description": "The priority level of the task (e.g., high, medium, low)."
        },
        "assignedToId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Task). The user to whom the task is assigned."
        },
        "isCompleted": {
          "type": "boolean",
          "description": "Indicates whether the task is completed."
        }
      },
      "required": [
        "id",
        "title",
        "dueDate",
        "priority",
        "assignedToId",
        "isCompleted"
      ]
    },
    "ShoppingListItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShoppingListItem",
      "type": "object",
      "description": "Represents an item on the shopping list.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ShoppingListItem entity."
        },
        "itemName": {
          "type": "string",
          "description": "The name of the item."
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the item needed."
        },
        "addedById": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ShoppingListItem). The user who added the item to the list."
        },
        "isPurchased": {
          "type": "boolean",
          "description": "Indicates whether the item has been purchased."
        }
      },
      "required": [
        "id",
        "itemName",
        "quantity",
        "addedById",
        "isPurchased"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. User ID is used for path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/families/{familyName}/events/{eventId}",
        "definition": {
          "entityName": "CalendarEvent",
          "schema": {
            "$ref": "#/backend/entities/CalendarEvent"
          },
          "description": "Stores calendar events for each family. Includes denormalized 'familyName' for authorization independence.",
          "params": [
            {
              "name": "familyName",
              "description": "The name of the family."
            },
            {
              "name": "eventId",
              "description": "The unique identifier of the calendar event."
            }
          ]
        }
      },
      {
        "path": "/families/{familyName}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks for each family. Includes denormalized 'familyName' for authorization independence.",
          "params": [
            {
              "name": "familyName",
              "description": "The name of the family."
            },
            {
              "name": "taskId",
              "description": "The unique identifier of the task."
            }
          ]
        }
      },
      {
        "path": "/families/{familyName}/shoppingListItems/{shoppingListItemId}",
        "definition": {
          "entityName": "ShoppingListItem",
          "schema": {
            "$ref": "#/backend/entities/ShoppingListItem"
          },
          "description": "Stores shopping list items for each family. Includes denormalized 'familyName' for authorization independence.",
          "params": [
            {
              "name": "familyName",
              "description": "The name of the family."
            },
            {
              "name": "shoppingListItemId",
              "description": "The unique identifier of the shopping list item."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/privateEvents/{eventId}",
        "definition": {
          "entityName": "CalendarEvent",
          "schema": {
            "$ref": "#/backend/entities/CalendarEvent"
          },
          "description": "Stores private calendar events for each user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "eventId",
              "description": "The unique identifier of the calendar event."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a family calendar application with shared and individual calendars, tasks, and shopping lists. Authorization Independence is achieved through denormalization. Each calendar event, task, and shopping list item stores the family name, allowing security rules to validate access based on the user's family affiliation without needing to perform expensive `get()` operations to retrieve family information from parent documents. The structure facilitates QAPs (Rules are not Filters) through structural segregation, where shared family data and individual user data are stored in separate collections, allowing for efficient and secure `list` operations based on family membership or user ID."
  }
}